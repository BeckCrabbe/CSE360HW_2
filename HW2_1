%pylab inline
#class PID:

#Perfect sensor
def sense(x):
    return x
def simulate(Δt, x, u):
    # The control input is equal to the velocity of the robot
    dx = array(u)

      # Euler integration
    x += Δt * dx
    return x
# Initial conditions
x = array([1.,2.])
x_log = [copy(x)]


tf = 15.
Δt = 0.1    # Time step
time = linspace(0.,tf, int(tf / Δt) + 1)  # Time interval

def control(t, x):
     ### WRITE YOUR CONTROL POLICY HERE:
     k = 1
     xd = [3.,3.]
     e = (xd - x)
     ux = k*e[0]
     uy = k * e[1]
     return array([ux, uy])
#def update(self, error, dt):
   #   derivative = (error - self.last_error) / dt
    #  self.integral += error * dt
     # output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
     # self.last_error = error
     # return output

for t in time:
    y = sense(x)
    u = control(t, x)
    x = simulate(Δt, x, u)
    x_log.append(copy(x))

x_log = array(x_log)

# Draw the robot path based on the log of the state vector
fig, ax = plt.subplots()
ax.plot(x_log[:,0], x_log[:,1], 'r--')
ax.set(title="Robot Path", xlabel="$x$", ylabel="$x$")
ax.grid()
conda install conda-forge::jsanimation
conda update -n base -c defaults conda
